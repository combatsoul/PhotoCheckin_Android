package com.example.photocheckin;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;

import com.example.listview.WallPage;

import android.app.ActionBar;
import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

public class ActivityRoomla extends Activity implements View.OnClickListener {
	
	private LinearLayout showDialogView;
    private TextView messageText;
    private Button uploadButton, btnselectpic;
    private ImageView imageview;
    private int serverResponseCode = 0;
    private ProgressDialog dialog = null;
	private ProgressDialog pDialog;
    private String upLoadServerUri = null;
    private String imagepath=null;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.index_activity);
		
		ImageView call_image = (ImageView) findViewById(R.id.imageHeader);
		call_image.setOnClickListener(this); 
		
        upLoadServerUri = "http://www.checkinphoto.com/android/uploadheaderpicture/uploadHeader.php";
        
		
		//hiding default app icon
		ActionBar actionBar = getActionBar();
		actionBar.setDisplayShowHomeEnabled(false);
		actionBar.setBackgroundDrawable(getResources().getDrawable(R.drawable.topbar));
//		//displaying custom ActionBar
//		View mActionBarView = getLayoutInflater().inflate(R.layout.my_action_bar, null);
//		actionBar.setCustomView(mActionBarView);
		actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
	}

	//show Header Picture popup. It is popup for select activity header.
	private void showUploadPicture(View v) {
		final Dialog createDialog = new Dialog(ActivityRoomla.this);
		// Inflate the root layout
		showDialogView = (LinearLayout) getLayoutInflater().inflate(
				R.layout.upload_picture_activity, null);
		// Setup TimePicker
		
        uploadButton = (Button) showDialogView.findViewById(R.id.uploadButton);
        messageText  = (TextView)showDialogView.findViewById(R.id.messageText);
        btnselectpic = (Button) showDialogView.findViewById(R.id.button_selectpic);
        imageview = (ImageView)showDialogView.findViewById(R.id.imageView_pic);
        
        btnselectpic.setOnClickListener(this);
        uploadButton.setOnClickListener(this);

		((ImageView) showDialogView.findViewById(R.id.imageCrossUpload))
				.setOnClickListener(new OnClickListener() {
					@Override
					public void onClick(View v) {
						createDialog.cancel();

					}
				});

//		((Button) showDialogView.findViewById(R.id.btn_create_popup))
//				.setOnClickListener(new OnClickListener() {
//
//					@Override
//					public void onClick(View v) {
//						if (btnValidateName(v)
//								&& btnValidateLocation(v)
//								&& btnValidateDateTime(v)) {
//							new Createactivitys().execute();
//							createDialog.cancel();
//						} else {
//
//						}
//
//					}
//				});
		// generate a 150x150 QR code


//		mapSearch = (ImageView) showDialogView
//				.findViewById(R.id.imageSearch);
//		mapSearch.setOnClickListener(showMapSearch);

		// No title on the dialog window
		createDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
		// Set the dialog content view
		createDialog.setContentView(showDialogView);
		//fix size dialog
		createDialog.getWindow().setLayout(450, 500);
		// Display the dialog
		createDialog.show();
	}
	
	@Override
	public void onClick(View v) {
		int id = v.getId();
		if (id == R.id.imageHeader) {
			showUploadPicture(v);
		}
		
		if(v==btnselectpic)
		{
			Intent intent = new Intent();
            intent.setType("image/*");
            intent.setAction(Intent.ACTION_GET_CONTENT);
            startActivityForResult(Intent.createChooser(intent, "Complete action using"), 1);
		}
		else if (v==uploadButton) {
			if(imagepath==null){
				
			}else{
				 dialog = ProgressDialog.show(ActivityRoomla.this, "", "Uploading file...", true);
				 messageText.setText("uploading started.....");
				 new Thread(new Runnable() {
	                 public void run() {
	                                     
	                	 uploadFile(imagepath);
	                                              
	                 }
	               }).start();   
			}
		}
	}
	
    @Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
	    
    	if (requestCode == 1 && resultCode == RESULT_OK) {
            //Bitmap photo = (Bitmap) data.getData().getPath(); 
          
            Uri selectedImageUri = data.getData();
            String aa = selectedImageUri.toString().substring(7,selectedImageUri.toString().length()); 
//          imagepath = getPath(selectedImageUri);
            imagepath = aa;
            Bitmap bitmap=BitmapFactory.decodeFile(imagepath);
            imageview.setImageBitmap(bitmap);
            messageText.setText("Uploading file path:" +imagepath);
	    	
	    }
    }
    	 public String getPath(Uri uri) {
    	        String[] projection = { MediaStore.Images.Media.DATA };
    	        Cursor cursor = managedQuery(uri, projection, null, null, null);
    	        int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
    	        cursor.moveToFirst();
    	        return cursor.getString(column_index);
    	    }
	    
    	 
    public int uploadFile(String sourceFileUri) {
          
    	  
    	  String fileName = sourceFileUri;
 
          HttpURLConnection conn = null;
          DataOutputStream dos = null;  
          String lineEnd = "\r\n";
          String twoHyphens = "--";
          String boundary = "*****";
          int bytesRead, bytesAvailable, bufferSize;
          byte[] buffer;
          int maxBufferSize = 1 * 1024 * 1024; 
          File sourceFile = new File(sourceFileUri); 
          
          if (!sourceFile.isFile()) {
        	  
	           dialog.dismiss(); 
	           
	           Log.e("uploadFile", "Source File not exist :"+imagepath);
	           
	           runOnUiThread(new Runnable() {
	               public void run() {
	            	   messageText.setText("Source File not exist :"+ imagepath);
	               }
	           }); 
	           
	           return 0;
           
          }
          else
          {
	           try { 
	        	   
	            	 // open a URL connection to the Servlet
	               FileInputStream fileInputStream = new FileInputStream(sourceFile);
	               URL url = new URL(upLoadServerUri);
	               
	               // Open a HTTP  connection to  the URL
	               conn = (HttpURLConnection) url.openConnection(); 
	               conn.setDoInput(true); // Allow Inputs
	               conn.setDoOutput(true); // Allow Outputs
	               conn.setUseCaches(false); // Don't use a Cached Copy
	               conn.setRequestMethod("POST");
	               conn.setRequestProperty("Connection", "Keep-Alive");
	               conn.setRequestProperty("ENCTYPE", "multipart/form-data");
	               conn.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + boundary);
	               conn.setRequestProperty("filUpload", fileName); 
	               
	               dos = new DataOutputStream(conn.getOutputStream());
	     
	               dos.writeBytes(twoHyphens + boundary + lineEnd); 
	               dos.writeBytes("Content-Disposition: form-data; name=\"filUpload\";filename=\""
	            		                     + fileName + "\"" + lineEnd);
	               
	               dos.writeBytes(lineEnd);
	     
	               // create a buffer of  maximum size
	               bytesAvailable = fileInputStream.available(); 
	     
	               bufferSize = Math.min(bytesAvailable, maxBufferSize);
	               buffer = new byte[bufferSize];
	     
	               // read file and write it into form...
	               bytesRead = fileInputStream.read(buffer, 0, bufferSize);  
	                 
	               while (bytesRead > 0) {
	            	   
	                 dos.write(buffer, 0, bufferSize);
	                 bytesAvailable = fileInputStream.available();
	                 bufferSize = Math.min(bytesAvailable, maxBufferSize);
	                 bytesRead = fileInputStream.read(buffer, 0, bufferSize);   
	                 
	                }
	     
	               // send multipart form data necesssary after file data...
	               dos.writeBytes(lineEnd);
	               dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);
	     
	               // Responses from the server (code and message)
	               serverResponseCode = conn.getResponseCode();
	               String serverResponseMessage = conn.getResponseMessage();
	                
	               Log.i("uploadFile", "HTTP Response is : " 
	            		   + serverResponseMessage + ": " + serverResponseCode);
	               
	               if(serverResponseCode == 200){
	            	   
	                   runOnUiThread(new Runnable() {
	                        public void run() {
	                        	String msg = "File Upload Completed.";
	                        	messageText.setText(msg);
	                            Toast.makeText(ActivityRoomla.this, "File Upload Complete.", Toast.LENGTH_SHORT).show();
	                        }
	                    });                
	               }    
	               
	               //close the streams //
	               fileInputStream.close();
	               dos.flush();
	               dos.close();
	                
	          } catch (MalformedURLException ex) {
	        	  
	              dialog.dismiss();  
	              ex.printStackTrace();
	              
	              runOnUiThread(new Runnable() {
	                  public void run() {
	                	  messageText.setText("MalformedURLException Exception : check script url.");
	                      Toast.makeText(ActivityRoomla.this, "MalformedURLException", Toast.LENGTH_SHORT).show();
	                  }
	              });
	              
	              Log.e("Upload file to server", "error: " + ex.getMessage(), ex);  
	          } catch (Exception e) {
	        	  
	              dialog.dismiss();  
	              e.printStackTrace();
	              
	              runOnUiThread(new Runnable() {
	                  public void run() {
	                	  messageText.setText("Got Exception : see logcat ");
	                      Toast.makeText(ActivityRoomla.this, "Got Exception : see logcat ", Toast.LENGTH_SHORT).show();
	                  }
	              });
	              Log.e("Upload file to server Exception", "Exception : "  + e.getMessage(), e);  
	          }
	          dialog.dismiss();       
	          return serverResponseCode; 
	          
           } // End else block 
         }
    
    
	protected class Createactivitys extends AsyncTask<String, Void, String>{
		private HttpResponse httpPost;

		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			pDialog = new ProgressDialog(ActivityRoomla.this);
			pDialog.setTitle("Connect to Server..");
			pDialog.setMessage("Loading ...");
			pDialog.setIndeterminate(false);
			pDialog.setCancelable(false);
			pDialog.show();
		}

		// send activity create
		protected String doInBackground(String... args) {
			// Building Parameters
			HttpClient httpclient = new DefaultHttpClient();
			// httpPost.setEntity(new
			// UrlEncodedFormEntity(params,"UTF-8"));

			HttpPost httppost = new HttpPost(
					"http://www.checkinphoto.com/android/createactivity/chkCreate.php");

			try {

//				activityname = (EditText) showDialogView
//						.findViewById(R.id.activityname_texf);

				// Add your data
				List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(
						2);

//				nameValuePairs.add(new BasicNameValuePair(
//						"activityname_texf", activityname.getText()
//								.toString()));
				
				nameValuePairs.add(new BasicNameValuePair(
				"activity_id", "1"));
				
				httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs,
						"UTF-8"));

				// Execute HTTP Post Request
				HttpResponse execute = httpclient.execute(httppost);
				InputStream content = execute.getEntity().getContent();
				// BufferedReader buffer = new BufferedReader(new
				// InputStreamReader(content));
				BufferedReader buffer = new BufferedReader(
						new InputStreamReader(content, "UTF-8"));

				String s = "";
				while ((s = buffer.readLine()) != null) {
					response += s;
				}
				Log.d("response", response);
			} catch (ClientProtocolException e) {
			} catch (IOException e) {
			}
			return null;
		}
		
		
		@Override
		protected void onPostExecute(String result) {
			// TODO Auto-generated method stub


			super.onPostExecute(result);
		}


		
	}

}
